"undefined"==typeof fcf&&"object"==typeof module&&"undefined"!=typeof module.filename&&require("fcf-framework-core"),fcf.module({name:"fcf-framework-unitest:unitest.js",dependencies:[],lazy:[],module:()=>{function a(a){return"number"==typeof a&&isNaN(a)?"NaN":void 0===a?"undefined":!1===a?"false":!0===a?"true":null===a?"null":fcf.str(a)}let b=fcf.prepare(fcf,"NUnitest");return fcf.addException("UNITEST_EQUAL","\"@{{left}}@\" and \"@{{right}}@\" are not equal"),fcf.addException("UNITEST_NOT_EQUAL","\"@{{left}}@\" and \"@{{right}}@\" are equal"),fcf.addException("UNITEST_LESS","\"@{{left}}@\" is not less than \"@{{right}}@\""),fcf.addException("UNITEST_LESS_EQUAL","\"@{{left}}@\" is not less than \"@{{right}}@\" or not equal"),fcf.addException("UNITEST_GREATER","\"@{{left}}@\" is not greater than \"@{{right}}@\""),fcf.addException("UNITEST_GREATER_EQUAL","\"@{{left}}@\" is not greater than \"@{{right}}@\" or not equal"),fcf.addException("UNITEST_ERROR","@{{error}}@"),fcf.addException("UNUTEST_WEB_COMMAND_UNSET","Web unit test command not installed for unitest.run() (Options: webProcesses.command)"),fcf.addException("UNITEST_ERROR_EXEC_COMMAND","Child process \"@{{process}}@\" exited with an error"),fcf.addException("UNITEST_FAILD_BROWSER_TEST","Failed to run test in browser. Command: \"@{{command}}@\". @{{error}}@"),fcf.addException("UNITEST_FAILD_SEND_MESSAGE","Failed to send message to test server \"@{{url}}@\""),fcf.addException("UNITEST_TIMEOUT","Test timed out"),b.Unitest=class{constructor(a){this._isRoot=!a,this._tests=a?fcf.NUnitest.unitest._tests:{}}add(a,b,c,d){return this._isRoot?void("function"==typeof c?(d=c,c=b,b=a,a="default"):"function"==typeof b?(d=b,c=a,b="default",a="default"):"function"==typeof a&&(d=a,c=fcf.uuid(),b="default",a="default"),fcf.prepare(this._tests,[a,b]),this._tests[a][b][c]=d):void fcf.NUnitest.unitest.add.apply(fcf.NUnitest.unitest,arguments)}run(a){return this._run(a)}compare(b,d,e,f){let g=fcf.compare(d,e,f);if("!="==b){if(0==g)throw this._task.currentTestInfo.error=new fcf.Exception("UNITEST_NOT_EQUAL",{left:a(d),right:a(e)}),this._task.currentTestInfo.error;}else if("="==b||"=="==b){if(0!=g){let b=new fcf.Exception("UNITEST_EQUAL",{left:a(d),right:a(e)});throw this._task&&this._task.currentTestInfo&&(this._task.currentTestInfo.error=b),b}}else if("<"==b){if(0<=g){let b=new fcf.Exception("UNITEST_LESS",{left:a(d),right:a(e)});throw this._task&&this._task.currentTestInfo&&(this._task.currentTestInfo.error=b),b}}else if("<="==b){if(0<g){let b=new fcf.Exception("UNITEST_LESS_EQUAL",{left:a(d),right:a(e)});throw this._task&&this._task.currentTestInfo&&(this._task.currentTestInfo.error=b),b}}else if(">"==b){if(0>=g){let b=new fcf.Exception("UNITEST_GREATER",{left:a(d),right:a(e)});throw this._task&&this._task.currentTestInfo&&(this._task.currentTestInfo.error=b),b}}else if(">="==b&&0>g){let b=new fcf.Exception("UNITEST_GREATER_EQUAL",{left:a(d),right:a(e)});throw this._task&&this._task.currentTestInfo&&(this._task.currentTestInfo.error=b),b}}error(a){let b=new fcf.Exception("UNITEST_ERROR",{error:a instanceof Error?"Test execution error":fcf.str(a)},a instanceof Error?a:void 0);throw this._task&&this._task.currentTestInfo&&(this._task.currentTestInfo.error=b),b}equal(a,b,c){return this.compare("==",a,b,c)}notEqual(a,b,c){return this.compare("!=",a,b,c)}less(a,b){return this.compare("<",a,b)}lessEqual(a,b){return this.compare("<=",a,b)}greater(a,b){return this.compare(">",a,b)}greaterEqual(a,b){return this.compare(">=",a,b)}runAutoTests(a){let b=new fcf.RouteInfo(window.location.href),c=b.args.___fcf_unitest_host||"localhost",d=b.args.___fcf_unitest_port,e=b.args.___fcf_unitest_id,f=Array.isArray(b.args.___fcf_unitest_tests)?b.args.___fcf_unitest_tests:void 0,g=Array.isArray(b.args.___fcf_unitest_groups)?b.args.___fcf_unitest_groups:void 0,h=Array.isArray(b.args.___fcf_unitest_parts)?b.args.___fcf_unitest_parts:void 0,i=isNaN(b.args.___fcf_unitest_step)?0:parseInt(b.args.___fcf_unitest_step),j=b.args.___fcf_unitest_include?b.args.___fcf_unitest_include:[],k=isNaN(parseInt(b.args.___fcf_unitest_wait))?b.args.___fcf_unitest_wait:parseInt(b.args.___fcf_unitest_wait);return fcf.actions().then(()=>this._run(fcf.append({},a,{id:e,parts:h,groups:g,tests:f,include:j}),{host:c,port:d},k)).then(async()=>{if(c&&d){let a=`http://${c}:${d}/getstep`;try{++i;let b={step:i,id:e},j=await fetch(a,{method:"POST",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify(b)}),k=await j.json();if(k.url){let a=new fcf.RouteInfo(k.url,"root");a.urlArgs.___fcf_unitest=void 0,a.urlArgs.___fcf_unitest_host=c,a.urlArgs.___fcf_unitest_port=d,a.urlArgs.___fcf_unitest_step=i,a.urlArgs.___fcf_unitest_groups=g,a.urlArgs.___fcf_unitest_parts=h,a.urlArgs.___fcf_unitest_tests=f,a.urlArgs.___fcf_unitest_id=e,a.urlArgs.___fcf_unitest_include=Array.isArray(k.include)?k.include:[],window.location.href=fcf.buildUrl(a)}}catch(b){throw new fcf.Exception("UNITEST_FAILD_SEND_MESSAGE",{url:a},b)}}})}_run(a,c,d){if(this._isRoot)return fcf.actions().then(()=>{let e=new b.Unitest(!0);return e._run(a,c,d)});let e=this;a=fcf.append({enableWebTests:!0,enableLocalTests:!0,processes:[],timeout:3e4,webTestingPort:4589,webBrowsers:[["google-chrome","chrome","chromium","firefox","opera","safari"]],webProcesses:[],webTestingPages:[]},a),this._task={options:a,result:{errorCount:0,testCount:0,successfulCount:0,tests:[],output:[]},currentTest:void 0,currentPart:void 0,currentGroup:void 0,selfOutput:!1,originLog:void 0,originError:void 0,originWarn:void 0,outputActions:fcf.actions(),pushOutput:function(a,b,d,f,g){let h={unitest:e,part:this.currentPart,group:this.currentGroup,test:this.currentTest,level:b,source:d,executor:a,time:new Date,message:fcf.trim(fcf.append([],g).map(a=>fcf.str(a)).join(" "),["\r","\n"])};this.currentTestInfo&&this.currentTestInfo.output.push(h),this.options.onMessage&&this.options.onMessage(h),fcf.getEventChannel().send("unitest_message",h),this.result.output.push(h),c&&c.host&&c.port&&this.outputActions.then(async()=>{let a=`http://${c.host}:${c.port}/message`;try{let b=fcf.append({},h,f);delete b.unitest,b.id=this.options.id;await fetch(a,{method:"PUT",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify(b)})}catch(b){throw new fcf.Exception("UNITEST_FAILD_SEND_MESSAGE",{url:a},b)}})}},this._task.outputActions.catch(a=>{this._err(a)});let f,g,h,i=[];return fcf.actions().then(async()=>{let a=this._task.options.include;a&&"string"==typeof a&&(a=[a]),Array.isArray(a)&&(await fcf.require(a)),f=this._quantityToOptionArray(this._task.options.parts),g=this._quantityToOptionArray(this._task.options.groups),h=this._quantityToOptionArray(this._task.options.tests)}).then(()=>{if("string"==typeof d){let a=fcf.resolve(window,d);return a()}return"number"==typeof d?fcf.actions().then((a,b)=>{setTimeout(()=>{b.complete()},d)}):void 0}).then(async()=>{await this._startTests(),await this._logTestsStart(f,g,h)}).each(this._task.options.processes,(a,b,c,d)=>{if(!this._isSelected(b.tests,h))return void d.complete();if(!this._isSelected(b.groups,g))return void d.complete();if(!this._isSelected(b.parts,f))return void d.complete();let e,j=require("child_process"),k=require("fcf-framework-core/NProcess/NProcess.js"),l=k.commandFromString(b.command),m=j.spawn(l.command,l.args);i.push(m),this._log(`Child process "${b.command}" started with pid ${m.pid}`),m.stdout.on("data",a=>{this._log(`Sub process "${l.command}" stdout:`,fcf.Logger.offset(4,` [${l.command} PID: ${m.pid}]> `),"\n",a.toString())}),m.stderr.on("data",a=>{this._err(`Sub process "${l.command}" stderr:`,fcf.Logger.offset(4,` [PID: ${m.pid}]> `),"\n",a.toString())}),m.on("error",()=>{clearTimeout(e),d.error(new fcf.Exception("UNITEST_ERROR_EXEC_COMMAND",{process:b.command}))}),m.on("exit",a=>{clearTimeout(e),a?d.error(new fcf.Exception("UNITEST_ERROR_EXEC_COMMAND",{process:b.command})):d.complete()}),i.push(m),e=setTimeout(()=>{d.complete()},b.startTimeout||1e3)}).then(()=>{if(this._task.options.enableLocalTests)return this._runLocalTests(f,g,h)}).then(()=>{if(this._task.options.enableWebTests&&!fcf.empty(this._task.options.webTestingPages))return this._runWebTests(f,g,h)}).then(()=>this._logTestsEnd()).finally(()=>fcf.actions().then((a,b)=>{this._task.outputActions.finally(()=>{b.complete()})}).then(()=>this._endTests())).finally(()=>{for(let a of i)try{a.kill()}catch(a){}}).then(()=>this._task.result)}async _runLocalTests(a,b,c){let d=[];for(let e in this._tests)if(!(a&&-1==a.indexOf(e)))for(let a in this._tests[e])if(!(b&&-1==b.indexOf(a)))for(let b in this._tests[e][a])c&&-1==c.indexOf(b)||d.push({part:e,group:a,name:b,test:this._tests[e][a][b]});d.length&&(this._log(""),this._log("Start local tests..."),this._log("--------------------"));for(let e of d){this._task.currentPart=e.part,this._task.currentGroup=e.group,this._task.currentTest=e.name,this._task.currentTestInfo={part:e.part,group:e.group,test:e.name,executor:fcf.isServer()?"server":"browser",status:void 0,error:void 0,output:[]},this._logEx({command:"start_test"},`Test [${this._task.currentPart}][${this._task.currentGroup}][${this._task.currentTest}] running ...`);let a;try{if(await fcf.actions().then(async(b,c)=>{a=setTimeout(()=>{c.error(new fcf.Exception("UNITEST_TIMEOUT"))},this._task.options.timeout),await e.test(this),c.complete()}),this._task.currentTestInfo.error)throw this._task.currentTestInfo.error;this._task.currentTestInfo.status="ok",this._logEx({command:"end_test",error:void 0},`Test [${this._task.currentPart}][${this._task.currentGroup}][${this._task.currentTest}] is completed.`)}catch(a){this._task.currentTestInfo.status="error",this._task.currentTestInfo.error=this._getErrorInfo(a),this._errEx({command:"end_test",error:a},`Test [${this._task.currentPart}][${this._task.currentGroup}][${this._task.currentTest}] is failed. \n`+`Position: ${this._task.currentTestInfo.error.file}:${this._task.currentTestInfo.error.line}\n`+`Error:   `,fcf.str(this._task.currentTestInfo.error.error,!0))}clearTimeout(a),this._task.result.tests.push(this._task.currentTestInfo),"error"==this._task.currentTestInfo.status?++this._task.result.errorCount:++this._task.result.successfulCount,++this._task.result.testCount,this._task.currentTestInfo=void 0}this._task.currentPart=void 0,this._task.currentGroup=void 0,this._task.currentTest=void 0,this._task.currentTestInfo=void 0}async _runWebTests(a,b,c){if(fcf.empty(this._task.options.webTestingPages)||!fcf.isServer())return;let d,e=require("child_process"),f=require("fcf-framework-core/NProcess/NProcess.js"),g=require("fcf-framework-unitest/NDetails/BackServer.js"),h=[];return fcf.actions().then(()=>{this._log(""),this._log("Start web tests..."),this._log("--------------------")}).each(this._task.options.webProcesses,async(d,g,i,j)=>{if(!this._isSelected(g.tests,c))return void j.complete();if(!this._isSelected(g.groups,b))return void j.complete();if(!this._isSelected(g.parts,a))return void j.complete();let k,l;if(fcf.empty(g.command)||!Array.isArray(g.command)&&"string"!=typeof g.command)throw new fcf.Exception("UNUTEST_WEB_COMMAND_UNSET",{});let m,n,o=Array.isArray(g.command)?f.commandToString(g.command):g.command;if(Array.isArray(g.command))n=fcf.clone(g.command),m=n.shift();else{let a=f.commandFromString(g.command);m=a.command,n=a.args}this._log(`Start process: ${o}`),l=e.spawn(m,n),h.push(l),this._log(`Child process "${m}" started with pid ${l.pid}`),l.stdout.on("data",a=>{this._log(`Sub process "${m}" stdout:`,fcf.Logger.offset(4,` [${m} PID: ${l.pid}]> `),"\n",a.toString())}),l.stderr.on("data",a=>{this._err(`Sub process "${m}" stderr:`,fcf.Logger.offset(4,` [PID: ${l.pid}]> `),"\n",a.toString())}),l.on("error",()=>{clearTimeout(k),j.error(new fcf.Exception("UNITEST_ERROR_EXEC_COMMAND",{process:o}))}),l.on("exit",a=>{clearTimeout(k),a&&j.error(new fcf.Exception("UNITEST_ERROR_EXEC_COMMAND",{process:o}))}),k=setTimeout(()=>{j.complete()},isNaN(g.startTimeout)?1e3:g.startTimeout)}).then(()=>(this._log(`Start back server on port ${this._task.options.webTestingPort}`),d=new g(this._task.options.webTestingPort,this._task.options.webTestingPages),d.run())).each(this._task.options.webBrowsers,async(a,b)=>{b=Array.isArray(b)?b:[b];let c,g,h;for(let j,k=0;k<b.length;++k){j=fcf.id(),c=void 0;try{let a,c;await fcf.actions().then((i,l)=>{g=b[k],-1==g.indexOf("{{")&&(g+=" \"@{{url}}@\"");let m=Array.isArray(this._task.options.webTestingPages[0].include)?this._task.options.webTestingPages[0].include:"string"==typeof this._task.options.webTestingPages[0].include?[this._task.options.webTestingPages[0].include]:[],n=this._task.options.webTestingPages[0].url;n+=-1==n.indexOf("?")?"?":"&",n+=`___fcf_unitest&___fcf_unitest_host=localhost&`+`___fcf_unitest_port=${this._task.options.webTestingPort}&`+`___fcf_unitest_tests=${encodeURIComponent(JSON.stringify(this._task.options.tests))}&`+`___fcf_unitest_groups=${encodeURIComponent(JSON.stringify(this._task.options.groups))}&`+`___fcf_unitest_parts=${encodeURIComponent(JSON.stringify(this._task.options.parts))}&`+`___fcf_unitest_id=${j}&`+(this._task.options.webTestingPages[0].wait?`___fcf_unitest_wait=${this._task.options.webTestingPages[0].wait}&`:"")+`___fcf_unitest_include=${encodeURIComponent(JSON.stringify(m))}`,g=fcf.tokenize(g,{url:n},{quiet:!0});let o=f.commandFromString(g);d.setId(j),d.onStep(a=>{if(Array.isArray(this._task.options.webTestingPages)&&this._task.options.webTestingPages[a]&&this._task.options.webTestingPages[a].url){let b=this._task.options.webTestingPages[a],c=new fcf.RouteInfo(this._task.options.webTestingPages[a].url,"root");c.urlArgs.___fcf_unitest=void 0,c.urlArgs.___fcf_unitest_host="localhost",c.urlArgs.___fcf_unitest_port=this._task.options.webTestingPort,c.urlArgs.___fcf_unitest_include=Array.isArray(b.include)?b.include:[],c.urlArgs.___fcf_unitest_step=a,c.urlArgs.___fcf_unitest_id=j,c.urlArgs.___fcf_unitest_wait=this._task.options.webTestingPages[a].wait;let d=fcf.buildUrl(c);this._msg(o.command,{unitest:this,part:void 0,group:void 0,test:void 0,level:"log",source:"UniTest",executor:o.command,time:new Date,message:`Go to page ${d}`})}else h=!0,c&&clearTimeout(c),l.complete()}),d.onMessage(a=>{a.test&&("start_test"==a.command?(clearTimeout(c),c=setTimeout(()=>{h=!0,l.error(new Error(`[${a.part}][${a.group}][${a.test}] test timed out`))},this._task.options.timeout),this._task.currentTestInfo={part:a.part,group:a.group,test:a.test,executor:o.command,status:void 0,error:void 0,output:[]}):"end_test"==a.command&&this._task.currentTestInfo&&(clearTimeout(c),c=setTimeout(()=>{h=!0,l.error(new Error("Browser command timed out"))},this._task.options.timeout),this._task.currentTestInfo.status=a.error?"error":"ok",this._task.currentTestInfo.error=a.error,this._task.result.tests.push(this._task.currentTestInfo),"error"==this._task.currentTestInfo.status?++this._task.result.errorCount:++this._task.result.successfulCount,++this._task.result.testCount,this._task.currentTestInfo=void 0),this._msg(o.command,a))}),this._log(`Start browser '${g}' ...`),a=e.spawn(o.command,o.args),a.on("error",()=>{clearTimeout(c),this._err(`Failed start browser 2'${g}'`),l.error(new Error(`browser '${g}' exited with an error.`))}),clearTimeout(c),c=setTimeout(()=>{h=!0,l.error(new Error(`Page "${n}" test timed out`))},this._task.options.timeout)}).finally(()=>{a&&a.kill(),c&&(clearTimeout(c),c=void 0)}).then(()=>{h=!0})}catch(a){c=a}if(h)break}if(c)throw new fcf.Exception("UNITEST_FAILD_BROWSER_TEST",{command:g,error:c})}).finally(()=>{d.stop();for(let a of h)try{a.kill()}catch(a){}})}async _startTests(){var a=this;this._task.originLog=console.log,console.log=function(){a._task.selfOutput||a._task.pushOutput("server","log","",{},arguments),a._task.originLog.apply(console,arguments)},this._task.originWarn=console.warn,console.warn=function(){a._task.selfOutput||a._task.pushOutput("server","warning","",{},arguments),a._task.originWarn.apply(console,arguments)},this._task.originError=console.error,console.error=function(){a._task.selfOutput||a._task.pushOutput("server","error","",{},arguments),a._task.originError.apply(console,arguments)},this._task.logEventHandlerBefore=function(){a._task.selfOutput||(a._task.selfLoggerOutput=!0,a._task.selfOutput=!0)},fcf.log.on("message_before",this._task.logEventHandlerBefore),this._task.logEventHandlerAfter=function(b){(!a._task.selfOutput||a._task.selfLoggerOutput)&&a._task.pushOutput("server",b.level,b.module,{},b.args),a._task.selfOutput&&a._task.selfLoggerOutput&&(a._task.selfLoggerOutput=!1,a._task.selfOutput=!1)},fcf.log.on("message_after",this._task.logEventHandlerAfter)}_endTests(){this._task.originLog&&(console.log=this._task.originLog),this._task.originWarn&&(console.warn=this._task.originWarn),this._task.originError&&(console.error=this._task.originError),fcf.log.detach(this._task.logEventHandlerBefore),fcf.log.detach(this._task.logEventHandlerAfter)}_logTestsStart(a,b,c){this._log("===================================================="),this._log(`Start testing${fcf.isServer()?" on the server side...":""}`),this._log(`Parts:  ${a?a.join("; "):"*"}`),this._log(`Groups: ${b?b.join("; "):"*"}`),this._log(`Tests:  ${c?c.join("; "):"*"}`)}_logTestsEnd(){let a=this._task.result.tests.filter(a=>!!a.error).map(a=>`Executor ${a.executor}:  [${a.part}][${a.group}][${a.test}]`).join(";\n");this._log(""),this._log("----------------------------------------------------"),this._log(`${this._task.result.testCount} test${1<this._task.result.testCount?"s":""} have been completed.`),this._log(`Errors: ${this._task.result.errorCount}; Successfully: ${this._task.result.successfulCount}; Total: ${this._task.result.testCount}`),a&&this._log(`Tests that failed: \n${a}`)}_msg(a,b){this._task.selfOutput=!0,this._task.pushOutput(a,b.level,b.source,{},[b.message]),this._task.options.quiet||fcf.log.log.apply(fcf.log,fcf.append([`${b.source}; BROWSER:${a}`],[b.message])),this._task.selfOutput=!1}_log(){this._task.selfOutput=!0,this._task.pushOutput("server","log","UniTest",{},arguments),this._task.options.quiet||fcf.log.log.apply(fcf.log,fcf.append(["UniTest"],arguments)),this._task.selfOutput=!1}_logEx(){let a=fcf.append([],arguments),b=a.shift();this._task.selfOutput=!0,this._task.pushOutput("server","log","UniTest",b,a),this._task.options.quiet||fcf.log.log.apply(fcf.log,fcf.append(["UniTest"],a)),this._task.selfOutput=!1}_err(){this._task.selfOutput=!0,this._task.pushOutput("server","error","UniTest",{},arguments),this._task.options.quiet||fcf.log.err.apply(fcf.log,fcf.append(["UniTest"],arguments)),this._task.selfOutput=!1}_errEx(){let a=fcf.append([],arguments),b=a.shift();this._task.selfOutput=!0,this._task.pushOutput("server","error","UniTest",b,a),this._task.options.quiet||fcf.log.log.apply(fcf.log,fcf.append(["UniTest"],a)),this._task.selfOutput=!1}_getErrorInfo(a){let b=fcf.parseStack(a),c=b.find(a=>!(a.function&&a.file)||a.function&&0!=a.function.indexOf("Namespace.Unitest.")&&-1==a.file.indexOf("fcf-framework-unitest/unitest.js")&&(-1==a.function.indexOf("Exception")||-1==a.file.indexOf("/fcf.js")));return{message:fcf.str(a),error:a,file:c?c.file:"unknown",line:c?c.line:"unknown"}}_quantityToOptionArray(a){return Array.isArray(a)?a:"string"==typeof a&&a.split(";")}_isSelected(a,b){if(a=this._quantityToOptionArray(a),b=this._quantityToOptionArray(b),!b||!a)return!0;let c=!1;for(let d of a)if(-1!=b.indexOf(d)){c=!0;break}return c}},b.unitest=new b.Unitest,b.unitest}});